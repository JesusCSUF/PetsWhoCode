@model PetVision.Web.Models.QuotePageOneDataModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    string imgSrc = "";
    if (Model.PetImage != null)
    {
        var base64 = Convert.ToBase64String(Model.PetImage);
        imgSrc = String.Format("data:image/gif;base64,{0}", base64);
    }
    else
    {
        imgSrc = "";
    }
}


<div class="container-fluid">

    <div class="row">
        <div class="col-sm-12 header-msg">
            <span>
                It looks like you've got a @Model.PredictedBreed
            </span>
        </div>
        <div class="col-sm-12  image-header">
            <img class="img-small" src="@imgSrc" />
        </div>

        <section class="row section">
            <div class="col-sm-12 col-sm-6">
                <div class="section-header">Traits</div>
                @Model.PetInfo.Traits
            </div>
    
                <div class="col-sm-12 col-sm-6">
                    <div class="section-header">Issues</div>
                    @Model.PetInfo.Issues
                </div>
        </section>


        <div class="row">
            <div class="col-sm-12">
                <span class="section-header">Top 3 Claim conditions and avg claim expsense for @Model.PredictedBreed in @Model.State in ZipCode: @Model.ZipCode</span>
            </div>
            <div class="col-lg-6 col-md-12">
                <canvas id="myChart"></canvas>
            </div>
            <div class="col-lg-6 col-md-12">
                <canvas id="myChart2"></canvas>
            </div>
        </div>


        <table class="table">
            <thead>
                <tr>
                    <td>Issue</td>
                    <td>Avg Claim</td>
                    <td>Avg Paid</td>
                    <td>Saving</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var x in Model.PetConditions)
                {
                    <tr>
                        <td>
                            @x.Condition
                        </td>
                        <td>
                            @decimal.Round(x.ClaimAmount, 0)
                        </td>
                        <td>
                            @decimal.Round(x.PaidAmount, 0)
                        </td>
                        <td>
                            @Decimal.Round(((x.ClaimAmount - x.PaidAmount) / x.ClaimAmount) * 100, 0)%
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            @Model.Pet.ProductSpecification.ProductName
        </div>
        <ul class="quote-buttons">
            @foreach (var x in Model.Pricings.Keys)
            {

                <li class="col-sm-12 card-slot">
                    <div class="card">
                        <div class="pet-old">
                            @x
                        </div>
                        <div class="yearly">
                            Annual Premium: $@Model.Pricings[x].Annual
                        </div>
                        <div class="monthly">
                            Monthly Premium: $@Model.Pricings[x].Monthly
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>




    @section scripts {
        <script>
        var backgroundColors = [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            ];

            var backgroundColors2 = [
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'];

            var backgroundColorSeries1 =
                'rgba(75, 192, 192, 0.2)';
            var backgroundColorSeries2 =
                'rgba(153, 102, 255, 0.2)';


        $(function () {
            Chart.platform.disableCSSInjection = true;
            var petinfos = @Html.Raw(Json.Encode(Model.PetConditions));
            var conditionRanking = @Html.Raw(Json.Encode(Model.ConditionRanking));

            var index = 1;
            var conditionRankingCalc = conditionRanking.map(x => {
                return index ++ * 10;
            })

                var ctx = document.getElementById('myChart');
                var data = {
                    datasets: [{
                        data: conditionRankingCalc,
                        backgroundColor: backgroundColors,
                    }],
                    labels: petinfos.map(x => x.Condition),
                }
                var myPieChart = new Chart(ctx, {
                    type: 'pie',
                    data: data,
            })

            var conditionClaimAmountCalc = petinfos.map(x => x.ClaimAmount);
            var conditionPaidAmountCalc = petinfos.map(x => x.PaidAmount);

            var ctx2 = document.getElementById('myChart2');
            var data = {
                datasets: [{
                    data: conditionClaimAmountCalc,
                    backgroundColor: backgroundColorSeries1,
                    label: "Avg. Claim Amt",
                },{
                        data: conditionPaidAmountCalc,
                        backgroundColor: backgroundColorSeries2,
                        label: "Avg. Member Paid Amt",
                }
                ],
                labels: petinfos.map(x => x.Condition),
            }
            new Chart(ctx2, {
                type: 'bar',
                data: data,
            })
        });
        </script>
    }
